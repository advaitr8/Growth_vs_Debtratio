}
}
fibonacci(10)
fibonacci <- function(x){
x <- as.integer(x)
for (i in 1:x){
print(i + (i-1))
}
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
for (i in 1:n){
print(i + (i-1))
}
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
for (i in 1:n){
n1 = i
n2 = i + n1
}
return(n2)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
for (i in 1:n){
n1 = i
n2 = i + n1
}
return(1:n2)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
vect[1] = 0
vect[2] = 1
for(i in 3:n){
vect[i] = vect[i-i] + vect[i-2]
}
return(vect)
}
fibonacci(10)
fibonacci(10)
vect = rep(NA,n)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
# vect[1] = 0
# vect[2] = 1
# for(i in 3:n){
#  vect[i] = vect[i-i] + vect[i-2]
#}
return(vect)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
vect[1] = 0
vect[2] = 1
# for(i in 3:n){
#  vect[i] = vect[i-i] + vect[i-2]
#}
return(vect)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
vect[1] = 0
vect[2] = 1
for(i in 3:n){
vect[i] = 4
#vect[i-i] + vect[i-2]
}
return(vect)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
vect[1] = 0
vect[2] = 1
for(i in 3:n){
vect[i] = vect[i-i] + vect[i-2]
}
return(vect)
}
fibonacci(10)
fibonacci <- function(n){
n <- as.integer(n)
vect = rep(NA,n)
vect[1] = 0
vect[2] = 1
for(i in 3:n){
vect[i] = vect[i-1] + vect[i-2]
}
return(vect)
}
fibonacci(10)
calc <- function(x){
length(matrix(rep(1,x), ncol = 3)[,3])
}
calc(27)
length(matrix(rep(1,27), ncol = 3)[,3])
(matrix(rep(1,27), ncol = 3)
)
calc <- function(x){
mean(c(x, 0, 0))
}
calc(27)
x <- c(0,100)
y <- c(0,100)
z <- x^0.5 * y^0.5
plot(z)
z
x <- (0:100)
y <- (0:100)
z <- x^0.5 * y^0.5
plot(z)
plot(y,x)
plot(x,y)
plot(x,y)
plot(z,y)
plot(z,y)
x <- seq(-10, 10, by=1)
y <- seq(0, 150, by=1)
a <- c(100, 200, 300)
persp(x, y, outer(x, y, u), ticktype="detailed")
contour(x, y, outer(x, y, u), levels=a)
u <- function(x, y) 3*x^2 + 2*y
x <- seq(-10, 10, by=1)
y <- seq(0, 150, by=1)
a <- c(100, 200, 300)
persp(x, y, outer(x, y, u), ticktype="detailed")
contour(x, y, outer(x, y, u), levels=a)
x <- rnorm(10^4,0,1)
plot(density(x))
y <- rnorm(10^4,0,2)
plot(density(y), col = "red")
x <- rnorm(10^4,0,1)
plot(density(x))
y <- rnorm(10^4,0,2)
lines(density(y), col = "red")
x <- rnorm(10^4,0,1)
plot(density(x), xlim = -5,5)
y <- rnorm(10^4,0,2)
lines(density(y), col = "red")
x <- rnorm(10^4,0,1)
plot(density(x), xlim = c(-5,5))
y <- rnorm(10^4,0,2)
lines(density(y), col = "red")
5*sqrt(2)
(100/3) - (100/18)
27.7778 - (100/9)
100/9
200/9
22.22-(10/3)
250/9
27.778-(50/9)
27.778-22.22
5.558/2
22.222+2.779
(2*27.778) - (2*22.222)
11.112/5
11.112/2
10*(4.2875) - 0.5*(3.9286 * 4.2857)
10*(4.2875) - 0.5*(3.9286 * 4.2857)
10*(3.9286) - 0.5*(3.9286 * 4.2857)
x <- 13^(1/4)
y <- 5^(3/4)
x*y
x <- 7^(1/4)
y <- 10^(3/4)
x*y
x <- 7^(-3/4)
y <- 10^(3/4)
x*y*0.25
x <- 7^(-3/4)
y <- 10^(3/4)
x*y*0.25
1/16
x <- 13^(-3/4)
y <- 5^(3/4)
x*y*0.0625
x <- 13^(-3/4)
y <- 5^(3/4)
x*y*0.0625
0.0305+0.3266
0.3266 - 0.0305
x <- 7^(1/4)
y <- 10^(-1/4)
x*y*0.75
3/16
1/16
x <- 13^(1/4)
y <- 5^(-1/4)
x*y*0.1875
0.686 - 0.238
0.2961/0.448
rm(list = ls())
install.packages("broom", dependencies = T)
library(broom)
library(foreign)
library(dplyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("/Users/Advait/Desktop/New_School/Christian.paper/Growth_vs_Debtratio")
getwd()
list.files()
#Make a country vector for desired countries
country_vector <- c("aus", "aut", "bel", "can", "deu", "dnk", "esp", "fra", "gbr", "grc", "ita", "jpn", "nld","prt", "swe", "usa")
##Get the raw dataset
df1 <- read.csv("data_draft1.csv", header = T)
str(df1)
##Pick the necessary columns from the full dataset
df2 <- df1 %>%
select(quart,
quarter,
aus.b.gdp:usa.b.gdp,
aus.gr.gdpv:usa.gr.gdpv,
aus.fsi:usa.fsi,
aus.gr.lf:usa.gr.lf,
aus.excheb:usa.excheb,
aus.gr.pgdp:usa.gr.pgdp,
aus.rirl:usa.rirl)
str(df2)
#Drop Finland from the dataset
df2 <- subset(df2, select = -c(fin.b.gdp, fin.gr.gdpv,
fin.fsi,fin.gr.lf,fin.excheb,
fin.gr.pgdp, fin.rirl))
str(df2)
dim(df2)
#Create an interim for debt_ratio which can later be STACKED into one single column
df_debt_ratio <- df2 %>%
select(aus.b.gdp:usa.b.gdp)
df_debt_ratio <- stack(df_debt_ratio)
str(df_debt_ratio)
#Create id from factors
df_debt_ratio$c_id <- as.numeric(df_debt_ratio$ind)
#Create an interim for growth rates which can later be STACKED into one single column
df_growth_rate <- df2 %>%
select(aus.gr.gdpv:usa.gr.gdpv)
df_growth_rate <- stack(df_growth_rate)
#Create an interim for financial stress which can later be STACKED into one single column
df_fin_stress <- df2 %>%
select(aus.fsi:usa.fsi)
df_fin_stress <- stack(df_fin_stress)
#Create an interim for labor force growth which can later be STACKED into one single column
df_labor <- df2 %>%
select(aus.gr.lf:usa.gr.lf)
df_labor <- stack(df_labor)
#Creating quarters repeating 16 times for each country.
df1$quarter
quarter <- rep(df1$quarter, 16)
length(quarter)
quarter[2075:2080]
#Creating years repeating 16 times for each country
df1$quart
time <- rep(df1$quart,16)
#Create an interim for exchange rate which can later be STACKED into one single column
df_exch <- df2 %>%
select(aus.excheb:usa.excheb)
df_exch <- stack(df_exch)
#Create an interim for interest rate which can later be STACKED into one single column
df_interest <- df2 %>%
select(aus.rirl:usa.rirl)
df_interest <- stack(df_interest)
#Create an interim for inflation rate which can later be STACKED into one single column
df_inflate <- df2 %>%
select(aus.gr.pgdp:usa.gr.pgdp)
df_inflate <- stack(df_inflate)
#Combine Quarter, ID, GDP, FSI, LF into one Dataframe
df_comp <- data.frame(time = time,
quarter = quarter,
country_id = df_debt_ratio$c_id,
growth_rate = df_growth_rate$values,
debt_to_gdp = df_debt_ratio$values,
fin_stress = df_fin_stress$values,
labor = df_labor$values,
exch = df_exch$values,
interest = df_interest$values,
inf_rate = df_inflate$values)
str(df_comp)
######################################################################
#Creating lags is required for complete df
library(data.table)
#Create df_temp to build lags
#We need a lagged growth rate and lagged debt ratio, both lagged by one period
df_temp <- as.data.table(df_comp)
df_temp$growth_lag <- rep(0,2080)
df_temp$debt_lag <- rep(0,2080)
df_temp <- df_temp[, growth_lag:=c(NA, growth_rate[-.N]),
by = country_id]
df_temp <- df_temp[, debt_lag:=c(NA, debt_to_gdp[-.N]),
by = country_id]
str(df_temp)
summary(df_temp)
#foo is to check if the lag variable works (which apparently it does)
foo  <- df_temp %>%
select(country_id,growth_rate, growth_lag,
debt_to_gdp,debt_lag)
df_comp <- df_temp
#Get rid of NA's
df_comp <- df_comp[complete.cases(df_comp),]
str(df_comp)
#df_comp is the full data frame.
#rm(list = ls())
setwd("/Users/Advait/Desktop/New_School/Christian.paper/Growth_vs_Debtratio")
source("data_munging.R")
str(df_comp)
install.packages("broom", dependencies = T)
str(df_comp)
time
quart
df1$quart
2013-1981+1
127/3
126/3
x <- df1$quart
x
x
(2012-1982) +  1
y1 <- rep(1, times = 3)
y2 <- rep((2:31), times = 4)
y3 <- rep(32, times = 3)
y <- c(y1,y2,y3)
y
for(i in 2:31){
y2 <- rep(i, times = 4)
}
y2
for(i in 2:31){
y2[i] <- rep(i, times = 4)
}
y2 <- rep(NA,100)
y2[i] <- rep(i, times = 4)
}
for(i in 2:31){
y2[i] <- rep(i, times = 4)
}
y2
y2 <- rep(NA,100)
for(i in 2:31){
y2 <- rep(i, times = 4)
}
y2
y1 <- rep((1,2), times = 3, each = 2)
y1 <- rep((1:2), times = 3, each = 2)
y1
y1 <- rep((2:31), each = 4)
y2 <- rep((2:31), each = 4)
y2
y3 <- rep(32, times = 3)
y1 <- rep(1, times = 3)
y2 <- rep((2:31), each = 4)
y3 <- rep(32, times = 3)
test <- cbind(x,c(y1,y2,y3))
length(x)
length(c(y1,y2,y3))
x
2012-1982
x <- df1$quart
x
y1 <- rep(1, times = 3)
y2 <- rep((2:32), each = 4)
y3 <- rep(33, times = 3)
test <- cbind(x,c(y1,y2,y3))
test
test <- cbind(x, y = c(y1,y2,y3))
test
t_id <- c(rep(1, times = 3),
rep((2:32), each = 4),
rep(33, times = 3))
t_id
t_id <- rep(t_id, 16)
rm(list = ls())
#install.packages("broom", dependencies = T)
library(broom)
library(foreign)
library(dplyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("/Users/Advait/Desktop/New_School/Christian.paper/Growth_vs_Debtratio")
getwd()
list.files()
#Make a country vector for desired countries
country_vector <- c("aus", "aut", "bel", "can", "deu", "dnk", "esp", "fra", "gbr", "grc", "ita", "jpn", "nld","prt", "swe", "usa")
##Get the raw dataset
df1 <- read.csv("data_draft1.csv", header = T)
str(df1)
##Pick the necessary columns from the full dataset
df2 <- df1 %>%
select(quart,
quarter,
aus.b.gdp:usa.b.gdp,
aus.gr.gdpv:usa.gr.gdpv,
aus.fsi:usa.fsi,
aus.gr.lf:usa.gr.lf,
aus.excheb:usa.excheb,
aus.gr.pgdp:usa.gr.pgdp,
aus.rirl:usa.rirl)
str(df2)
#Drop Finland from the dataset
df2 <- subset(df2, select = -c(fin.b.gdp, fin.gr.gdpv,
fin.fsi,fin.gr.lf,fin.excheb,
fin.gr.pgdp, fin.rirl))
str(df2)
dim(df2)
#Create an interim for debt_ratio which can later be STACKED into one single column
df_debt_ratio <- df2 %>%
select(aus.b.gdp:usa.b.gdp)
df_debt_ratio <- stack(df_debt_ratio)
str(df_debt_ratio)
#Create id from factors
df_debt_ratio$c_id <- as.numeric(df_debt_ratio$ind)
#Create an interim for growth rates which can later be STACKED into one single column
df_growth_rate <- df2 %>%
select(aus.gr.gdpv:usa.gr.gdpv)
df_growth_rate <- stack(df_growth_rate)
#Create an interim for financial stress which can later be STACKED into one single column
df_fin_stress <- df2 %>%
select(aus.fsi:usa.fsi)
df_fin_stress <- stack(df_fin_stress)
#Create an interim for labor force growth which can later be STACKED into one single column
df_labor <- df2 %>%
select(aus.gr.lf:usa.gr.lf)
df_labor <- stack(df_labor)
#Creating quarters repeating 16 times for each country.
df1$quarter
quarter <- rep(df1$quarter, 16)
length(quarter)
quarter[2075:2080]
#Creating years repeating 16 times for each country
df1$quart
time <- rep(df1$quart,16)
#Creating time id variable
t_id <- c(rep(1, times = 3),
rep((2:32), each = 4),
rep(33, times = 3))
t_id <- rep(t_id, 16)
#Create an interim for exchange rate which can later be STACKED into one single column
df_exch <- df2 %>%
select(aus.excheb:usa.excheb)
df_exch <- stack(df_exch)
#Create an interim for interest rate which can later be STACKED into one single column
df_interest <- df2 %>%
select(aus.rirl:usa.rirl)
df_interest <- stack(df_interest)
#Create an interim for inflation rate which can later be STACKED into one single column
df_inflate <- df2 %>%
select(aus.gr.pgdp:usa.gr.pgdp)
df_inflate <- stack(df_inflate)
#Combine Quarter, ID, GDP, FSI, LF into one Dataframe
df_comp <- data.frame(time = time,
t_id = t_id,
quarter = quarter,
country_id = df_debt_ratio$c_id,
growth_rate = df_growth_rate$values,
debt_to_gdp = df_debt_ratio$values,
fin_stress = df_fin_stress$values,
labor = df_labor$values,
exch = df_exch$values,
interest = df_interest$values,
inf_rate = df_inflate$values)
str(df_comp)
######################################################################
#Creating lags is required for complete df
library(data.table)
#Create df_temp to build lags
#We need a lagged growth rate and lagged debt ratio, both lagged by one period
df_temp <- as.data.table(df_comp)
df_temp$growth_lag <- rep(0,2080)
df_temp$debt_lag <- rep(0,2080)
df_temp <- df_temp[, growth_lag:=c(NA, growth_rate[-.N]),
by = country_id]
df_temp <- df_temp[, debt_lag:=c(NA, debt_to_gdp[-.N]),
by = country_id]
str(df_temp)
summary(df_temp)
#foo is to check if the lag variable works (which apparently it does)
foo  <- df_temp %>%
select(country_id,growth_rate, growth_lag,
debt_to_gdp,debt_lag)
df_comp <- df_temp
#Get rid of NA's
df_comp <- df_comp[complete.cases(df_comp),]
str(df_comp)
#df_comp is the full data frame.
#rm(list = ls())
setwd("/Users/Advait/Desktop/New_School/Christian.paper/Growth_vs_Debtratio")
source("data_munging.R")
str(df_comp)
t_id <- df_comp$t_id
exch <- df_comp$exch
growth <- df_comp$growth_rate
growth_lag <- df_comp$growth_lag
debt_lag <- df_comp$debt_lag
labor <- df_comp$labor
fin_stress <- df_comp$fin_stress
country_id <- df_comp$country_id
t_id <- df_comp$t_id
exch <- df_comp$exch
interest <- df_comp$interest
inf_rate <- df_comp$inf_rate
range(df_comp$fin_stress)
